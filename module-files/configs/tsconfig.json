{
  "compilerOptions": {
    // Basic Options schema
    "target": "ES2018", // Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'.
    "module": "commonjs", // Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'.
    "lib": ["dom", "esnext"], // Specify library files to be included in the compilation. schema
    // "allowJs": true,                       // Allow javascript files to be compiled. schema
    // "checkJs": true,                       // Report errors in .js files. schema
    // "jsx": "preserve",                     // Specify JSX code generation: 'preserve', 'react-native', or 'react'. schema

    "declaration": true, // Generates corresponding '.d.ts' file. schema
    "declarationMap": true, // Generates a sourcemap for each corresponding '.d.ts' file. schema
    "sourceMap": true, // Generates corresponding '.map' file. schema
    // "outFile": "./",                       // Concatenate and emit output to single file. schema
    "outDir": "../../dist", // Redirect output structure to the directory. schema
    // "rootDir": "./",                       // Specify the root directory of input files. Use to control the output directory structure with --outDir. schema
    // "composite": true,                     // Enable project compilation schema
    // "incremental": true,                   // Enable incremental compilation schema
    // "tsBuildInfoFile": "./",               // Specify file to store incremental compilation information schema
    // "removeComments": true,                // Do not emit comments to output. schema
    // "noEmit": true,                        // Do not emit outputs. schema
    "importHelpers": true, // Import emit helpers from 'tslib'. schema
    // "downlevelIteration": true,            // Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. schema
    // "isolatedModules": true,               // Transpile each file as a separate module (similar to 'ts.transpileModule'). schema
    // Strict Type-Checking Options schema
    "strict": true, // Enable all strict type-checking options.
    // "noImplicitAny": true,                 // Raise error on expressions and declarations with an implied 'any' type. schema
    // "strictNullChecks": true,              // Enable strict null checks. schema
    // "strictFunctionTypes": true,           // Enable strict checking of function types. schema
    // "strictBindCallApply": true,           // Enable strict 'bind', 'call', and 'apply' methods on functions. schema
    // "strictPropertyInitialization": true,  // Enable strict checking of property initialization in classes. schema
    // "noImplicitThis": true,                // Raise error on 'this' expressions with an implied 'any' type. schema
    // "alwaysStrict": true,                  // Parse in strict mode and emit "use strict" for each source file. schema
    // Additional Checks schema
    // "noUnusedLocals": true,                // Report errors on unused locals. schema
    // "noUnusedParameters": true,            // Report errors on unused parameters. schema
    // "noImplicitReturns": true,             // Report error when not all code paths in function return a value. schema
    // "noFallthroughCasesInSwitch": true,    // Report errors for fallthrough cases in switch statement. schema
    // Module Resolution Options schema
    "moduleResolution": "node", // Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). schema
    // "baseUrl": "./",                       // Base directory to resolve non-absolute module names. schema
    // "paths": {},                           // A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. schema
    // "rootDirs": [],                        // List of root folders whose combined content represents the structure of the project at runtime. schema
    "typeRoots": ["../../@types", "../../node_modules/@types"], // List of folders to include type definitions from. schema
    // "types": [],                           // Type declaration files to be included in compilation. schema
    // "allowSyntheticDefaultImports": true,  // Allow default imports from modules with no default export. This does not affect code emit, just typechecking. schema
    "esModuleInterop": true, // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.
    // "preserveSymlinks": true,              // Do not resolve the real path of symlinks. schema
    // Source Map Options schema
    // "sourceRoot": "",                      // Specify the location where debugger should locate TypeScript files instead of source locations. schema
    // "mapRoot": "",                         // Specify the location where debugger should locate map files instead of generated locations. schema
    // "inlineSourceMap": true,               // Emit a single file with source maps instead of having a separate file. schema
    // "inlineSources": true,                 // Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. schema
    // Experimental Options schema
    "experimentalDecorators": true, // Enables experimental support for ES7 decorators.
    "emitDecoratorMetadata": true // Enables experimental support for emitting type metadata for decorators. schema
  },
  "include": ["../../src/**/*"],
  "exclude": [
    "../../node_modules",
    "../../node_modules.nosync",
    "../../**/*.test.ts",
    "../../**/*.spec.ts",
    "../../**/*.e2e.ts",
    "../../**/*/test-helper"
  ],
  "typedocOptions": {
    "exclude": ["../../**/*+(.test|.spec|.e2e).ts", "/*/test-helper/**/*"]
  }
}
